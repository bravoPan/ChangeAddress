name: iOS starter workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Default Scheme
        run: |
          echo "Using the CheckAddress scheme" > default
          echo Using default scheme: CheckAddress
      - name: Check Xcode version
        run: |
          xcodebuild -version
      - name: Build
        run: |
          device=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//")
          if [ -z "$device" ]; then
            echo "No iPhone simulators found!"
            exit 1
          fi
          scheme=$(cat default)
          
          # Print the current directory and files to debug
          echo "Listing files in the current directory:"
          ls -l
          
          # Explicitly check for CheckAddress.xcodeproj file
          if [ -f "CheckAddress.xcodeproj" ]; then
            filetype_parameter="project"
            file_to_build="CheckAddress.xcodeproj"
          elif [ -f "*.xcworkspace" ]; then
            filetype_parameter="workspace"
            file_to_build=$(ls *.xcworkspace)
          else
            echo "No .xcodeproj or .xcworkspace found!"
            exit 1
          fi

          echo "Building $file_to_build using scheme $scheme"
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=iOS Simulator,name=$device"
      - name: Test
        run: |
          device=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//")
          if [ -z "$device" ]; then
            echo "No iPhone simulators found!"
            exit 1
          fi
          scheme=$(cat default)

          # Check for CheckAddress.xcodeproj file explicitly
          if [ -f "CheckAddress.xcodeproj" ]; then
            filetype_parameter="project"
            file_to_build="CheckAddress.xcodeproj"
          elif [ -f "*.xcworkspace" ]; then
            filetype_parameter="workspace"
            file_to_build=$(ls *.xcworkspace)
          else
            echo "No .xcodeproj or .xcworkspace found!"
            exit 1
          fi

          # Ensure only one file is returned by ls
          if [ $(echo "$file_to_build" | wc -l) -gt 1 ]; then
            echo "Multiple project/workspace files found. Please specify the correct one."
            exit 1
          fi

          echo "Running tests for $file_to_build using scheme $scheme"
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=iOS Simulator,name=$device"
