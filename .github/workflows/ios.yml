name: iOS starter workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        run: |
          device=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//")
          if [ -z "$device" ]; then
            echo "No iPhone simulators found!"
            exit 1
          fi
          scheme=$(cat default)
          
          # Print the current directory and files to debug
          echo "Listing files in the current directory:"
          ls -l
          
          # Explicitly check for .xcodeproj or .xcworkspace
          if [ -f "CheckAddress.xcodeproj" ]; then
            filetype_parameter="project"
            file_to_build="CheckAddress.xcodeproj"
          elif [ -f "*.xcworkspace" ]; then
            filetype_parameter="workspace"
            file_to_build=$(ls *.xcworkspace)
          else
            echo "No .xcodeproj or .xcworkspace found!"
            exit 1
          fi

          echo "Building $file_to_build using scheme $scheme"
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=iOS Simulator,name=$device"
      - name: Test
        run: |
          device=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//")
          if [ -z "$device" ]; then
            echo "No iPhone simulators found!"
            exit 1
          fi
          scheme=$(cat default)
          if [ -f *.xcworkspace ]; then
            filetype_parameter="workspace"
            file_to_build=$(ls *.xcworkspace)
          else
            filetype_parameter="project"
            file_to_build=$(ls *.xcodeproj)
          fi
          if [ -z "$file_to_build" ]; then
            echo "No .xcodeproj or .xcworkspace found!"

            exit 1
          fi
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=iOS Simulator,name=$device"
